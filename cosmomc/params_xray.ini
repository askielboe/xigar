#Sample parameters for cosmomc in default parameterization

#Root name for files produced
file_root = xigar

samples = 1000000

delta_loglike = 2

sampling_method = 1

estimate_propose_matrix = F

propose_scale = 2.4

#Temperature at which to Monte-Carlo
temperature = 1

#action = 0, to MCMC, action=1, postprocess .data file
action = 0

#Feedback level ( 2=lots,1=chatty,0=less,-1=minimal)
feedback = 1

#Can re-start from the last line of previous run (.txt file)
continue_from = 

#Increase to oversample fast parameters,e.g. if space is odd shape
oversample_fast = 1

#Can use covariance matrix for proposal density, otherwise use settings below
#Covariance matrix can be produced using "getdist" prorgram.
propose_matrix = 

#If action = 1
redo_likelihoods = T
redo_theory = F
redo_cls = F
redo_pk = F
redo_skip = 0
redo_outroot = 
redo_thin = 1
#If large difference in log likelihoods may need to offset to give sensible weights
#for exp(difference in likelihoods)
redo_likeoffset =  0

#Number of distinct points to sample
#Every accepted point is included

#number of steps between independent samples
#if non-zero all info is dumped to file file_root.data
#if you change this probably have to change output routines in code too
indep_sample = 0

#number of samples to disgard at start
#May prefer to set to zero and remove later
burn_in = 0

#If zero set automatically
num_threads = 0

#MPI mode multi-chain options (recommended)
#MPI_Converge_Stop is a (variance of chain means)/(mean of variances) parameter that can be used to stop the chains
#Set to a negative number not to use this feature. Does not guarantee good accuracy of confidence limits.
MPI_Converge_Stop = 0.03
#if MPI_LearnPropose = T, the proposal density is continally updated from the covariance of samples so far (since burn in)
MPI_LearnPropose = T

#Can optionally also check for convergence of confidence limits (after MPI_Converge_Stop  reached)
MPI_Check_Limit_Converge = F

#if MPI_Check_Limit_Converge = T, give tail fraction to check (checks both tails):
MPI_Limit_Converge = 0.025
#And the permitted percentil chain variance in units of the standard deviation (small values v slow):
MPI_Limit_Converge_Err = 0.3
#which parameter's tails to check. If zero, check all parameters:
MPI_Limit_Param = 0

#If have covmat, R to reach before updating proposal density (increase if covmat likely to be poor)
#Only used if not varying new parameters that are fixed in covmat
MPI_Max_R_ProposeUpdate = 2
#As above, but used if varying new parameters that were fixed in covmat
MPI_Max_R_ProposeUpdateNew = 30


#if blank this is set from system clock
rand_seed = 

#parameter start center, min, max, start width, propose width
#e.g. for 2D Gaussian
#param1 = 3 1 9 2 0.1							# critical radius
##param1 = 0.15 0.1 0.3 0.1 0.1					# critical radius
param1 = 0.15 0.0 0.30 0.1 0.1					# critical radius
#param1 = 0.15 0.15 0.15 0 0					# critical radius
#param1 = 5. 5. 5. 0 0

##param2 = 1.0 0.5 3.0 0.1 0.1					# temp a
param2 = 2.5 0.0 5.0 0.1 0.1					# temp a
#param2 = 2.5 2.5 2.5 0 0						# temp a
#param2 = 1.2 1.2 1.2 0 0

#param3 = 1 0 2 0.1 0.01						# temp b
##param3 = 0.5 0.1 1.0 0.1 0.1					# temp b
param3 = 0.7 0.0 1.4 0.1 0.1					# temp b
#param3 = 0.7 0.7 0.7 0 0						# temp b
#param3 = 0.01 0.01 0.01 0 0

#param4 = 1 0.5 2 1 0.1							# density n0
#param4 = 1.0 1.0 1.0 0 0						# density n0
##param4 = 1.0 0.1 2. 0.1 0.1					# density n0
param4 = 1.0 0.0 2.0 0.1 0.1					# density n0
#param4 = 1.3 1.3 1.3 0 0

#param6 = 0.011 0.008 0.012 0.01 0.01			# density rc

#param5 = 0.6 0.5 1.5 1 0.1						# density alpha
#param5 = 0.9 0.9 0.9 0 0						# density alpha
##param5 = 1.0 0.1 2.0 0.1 0.1					# density alpha
param5 = 0.8 0.0 1.6 0.1 0.1					# density alpha
#param5 = 0.8 0.8 0.8 0 0						# density alpha
#param5 = 1 0.5 1.5 0.5 0.1

#param7 = 0.5 0.3 0.8 0.1 0.01					# density beta

#param6 = 2 2 2 0 0								# sphvol alpha
#param6 = 0.5 0 1 0 0							# sphvol alpha
param6 = 3.0 3.0 3.0 0 0					# sphvol alpha
##param6 = 3.0 0.0 6.0 0.1 0.1					# sphvol alpha
#param6 = -3. -3. -3. 0. 0.						# sphvol alpha

param7 = 0.5 0.5 0.5 0 0					# sphvol beta
##param7 = 0.5 0.0 1.0 0.1 0.1					# sphvol beta
#param7 = 3.0 3.0 3.0 0. 0.						# sphvol beta

#parameter start center, min, max, start width, propose width
#e.g. for 2D Gaussian
#param1 = 5. 4 5 0.1 0.1	# critical radius
#param2 = 0.3 0.2 0.4 0.01 0.01				# temp a
#param3 = 1 0 2 0.1 0.01						# temp b
#param3 = 0.01 0.005 0.015 0.01 0.01			# temp c
#param4 = 1.3 1.2 1.4 0.01 0.01				# density n0
#param6 = 0.011 0.008 0.012 0.01 0.01		# density rc
#param5 = 0.9 0.7 1.1 0.1 0.01					# density alpha
#param7 = 0.5 0.3 0.8 0.1 0.01				# density beta
#param6 = -1 -5 5 1 1								# sphvol alpha

#parameter start center, min, max, start width, propose width
#e.g. for 2D Gaussian
#param1 = 5. 4.9 5.1 0.1 0.1	# critical radius
#param2 = 0.3 0.29 0.31 0.01 0.01				# temp a
#param3 = 1 0 2 0.1 0.01						# temp b
#param3 = 0.01 0.009 0.011 0.01 0.01			# temp c
#param4 = 1.3 1.29 1.31 0.01 0.01				# density n0
#param6 = 0.011 0.008 0.012 0.01 0.01		# density rc
#param5 = 0.9 0.8 1 0.1 0.01					# density alpha
#param7 = 0.5 0.3 0.8 0.1 0.01				# density beta
#param6 = -1 -5 5 1 1								# sphvol alpha

##Unused parameters
cmb_numdatasets = 0

use_CMB = F
use_HST = F
use_mpk = F
use_clusters = F
use_BBN = F
use_Age_Tophat_Prior = F
use_SN = F
use_min_zre = 0
#CAMB parameters
#If we are including tensors
compute_tensors = F
#Whether the CMB should be lensed (slows a lot unless also computing matter power)
CMB_lensed = F
